# Select what we should cache
#cache:
#  paths:
#  - vendor/

.default-mysql: &default-mysql
  # Install required PHP extensions
  - docker-php-ext-install -j$(nproc) mysqli curl
  # set up config files
  - touch backend/config_.php
  - echo "<?php // local config" >> backend/config_.php
  - echo "define('DB_HOST', 'mysql');" >> backend/config_.php
  - echo "define('DB_USER', 'root');" >> backend/config_.php
  - echo "define('DB_PWD', 'mysql');" >> backend/config_.php
  - echo "define('DB_NAME', 'lynxphp');" >> backend/config_.php
  - echo "?>"  >> backend/config_.php
  - cp backend/config_.php backend/config_localhost.php
  - touch frontend/config_.php
  - cp frontend/config_.php frontend/config_localhost.php

.default-pgsql: &default-pgsql
  # Install required PHP extensions
  - docker-php-ext-install -j$(nproc) pgsql curl
  # set up config files
  - touch backend/config_.php
  - echo "<?php // local config" >> backend/config_.php
  - echo "define('DB_HOST', 'pgsql');" >> backend/config_.php
  - echo "define('DB_USER', 'lynxphp');" >> backend/config_.php
  - echo "define('DB_PWD', '');" >> backend/config_.php
  - echo "define('DB_NAME', 'lynxphp');" >> backend/config_.php
  - echo "define('DB_DRIVER', 'pgsql');" >> backend/config_.php
  - echo "?>"  >> backend/config_.php
  - cp backend/config_.php backend/config_localhost.php
  - touch frontend/config_.php
  - cp frontend/config_.php frontend/config_localhost.php

# Why use debian if alpine is faster? Robustness tests?
.debian: &debian
  - apt-get update -yqq
  - apt-get install -yqq git libcurl4-openssl-dev libpq-dev wget curl

.alpine: &alpine
  - apk add openrc curl-dev postgresql-dev wget curl

variables:
  # Configure mysql service (https://hub.docker.com/_/mysql/)
  MYSQL_DATABASE: "lynxphp"
  MYSQL_ROOT_PASSWORD: "mysql"
  MYSQL_ROOT_HOST: "%"
  POSTGRES_DB: "lynxphp"
  POSTGRES_USER: "lynxphp"
  POSTGRES_PASSWORD: ""
  POSTGRES_HOST_AUTH_METHOD: trust

test:nginx:my:latest:
  before_script:
    - *alpine
    - *default-mysql
    - apk add nginx
    - adduser -D -g 'www' www
    - |
      echo -e "
      user                            www;
      worker_processes                1;

      error_log                       /var/log/nginx/error.log warn;
      pid                             /var/run/nginx.pid;

      events {
          worker_connections          1024;
      }

      http {
          include                     /etc/nginx/mime.types;
          default_type                application/octet-stream;
          sendfile                    on;
          access_log                  /var/log/nginx/access.log;
          keepalive_timeout           3000;
          server {
              listen                  80;
              root                    /www;
              index                   index.php;
              server_name             localhost;
              client_max_body_size    100m;

              location /backend {
                if (!-e \$request_filename){
                  rewrite ^/backend(.*)$ /backend/index.php$1;
                }
              }

              location / {
                # First attempt to serve request as file, then
                # as directory, then fall back to displaying a 404.
                try_files \$uri \$uri/ /index.php$uri;
              }
              location ~ [^/]\.php(/|$) {
                    fastcgi_pass      127.0.0.1:9000;
                    fastcgi_index     index.php;
                    include           fastcgi.conf;
              }
          }
      }
      "  > /etc/nginx/nginx.conf
    - cat /etc/nginx/nginx.conf
    - nginx -t
    - rc-service nginx stop
    - rc-service nginx start
  image: php:8.0.0-fpm-alpine
  services:
    - name: mysql/mysql-server:latest
      alias: mysql
  tags:
    - docker
  script:
    - tests/run.sh
    - curl http://localhost/backend/
    - curl http://localhost/
    - wget -O phpunit https://phar.phpunit.de/phpunit-nightly.phar
    - chmod u+x phpunit
    - ./phpunit tests/integration
