<?php

// is this file going to get huge
// should we specialize or tie to handler?

/**
 * consume backend resource
 * options
 *   general
 *     endpoint (lynx/bob) REQUIRED
 *     method (GET, POST, AUTO, etc)
 *   post data
 *     requires - validation
 *     formData - associative array of key/values
 *   headers
 *     sendSession
 *     sendIP
 *   response
 *     expectJson
 *     unwrapData
 */
// should there be a validation levels for call params...
// these should not be generated by the backend side
//   because then the frontend would have to download it everytime it's called
//   though you could cache it locally
function consume_beRsrc($options, $params = '') {
  if (!isset($options['endpoint'])) return;
  $postData = '';
  if (!empty($options['formData'])) {
    $postData = $options['formData'];
  }
  $headers = array();
  if (!empty($options['sendSession'])) {
    if (!isset($_COOKIE['session'])) {
      return false;
    }
    $headers['sid'] = $_COOKIE['session'];
  }
  if (!empty($options['sendIP'])) $headers['HTTP_X_FORWARDED_FOR'] = getip();
  if (!count($headers)) $headers = '';

  /*
  // files
  $json  = curlHelper(BACKEND_BASE_URL . $options['endpoint'], array(
    'files' => curl_file_create($tmpfile, $type, $filename)
  ), '', '', '', 'POST');
  */
  // post login/IP
  $responseText = curlHelper(BACKEND_BASE_URL . $options['endpoint'], $postData,
    $headers, '', '', empty($options['method']) ? 'AUTO' : $options['method']);
  if (!empty($options['expectJson']) || !empty($options['unwrapData'])) {
    $obj = json_decode($responseText, true);
    if (!$obj) {
      wrapContent('Backend error: ' .  $options['endpoint'] . ': ' . $responseText);
      return;
    }
    if (!empty($options['unwrapData'])) return $obj['data'];
    return $obj;
  }
  return $responseText;
}

function getExpectJson($endpoint) {
  $json = curlHelper(BACKEND_BASE_URL . $endpoint);
  $obj = json_decode($json, true);
  if (!$obj) {
    wrapContent('Backend error: ' .  $endpoint . ': ' . $json);
    return;
  }
  return $obj;
}

function getBoards() {
  $boards = getExpectJson('4chan/boards.json');
  return $boards;
}

function getBoard($boardUri) {
  $boardData = getExpectJson('opt/' . $boardUri . '.json');
  return $boardData['data'];
}

function backendGetBoardThreadListing($boardUri, $pageNum = 1) {
  $threadListing = getExpectJson('opt/boards/' . $boardUri . '/' . $pageNum);
  return $threadListing['data'];
}

function getBoardPage($boardUri, $page = 1) {
  $page1 = getExpectJson('4chan/' . $boardUri . '/' . $page . '.json');
  return $page1;
}

function getBoardCatalog($boardUri) {
  $pages = getExpectJson('4chan/' . $boardUri . '/catalog.json');
  return $pages;
}

function getBoardThread($boardUri, $threadNum) {
  $result = getExpectJson('4chan/' . $boardUri . '/thread/' . $threadNum . '.json');
  return $result['posts'];
}

function sendFile($tmpfile, $type, $filename) {
  $json  = curlHelper(BACKEND_BASE_URL . 'lynx/files', array(
    'files' => make_file($tmpfile, $type, $filename)
  ), '', '', '', 'POST');
  $result = json_decode($json, true);
  return $result['data'];
}

// authed functions

function backendAuthedGet($endpoint) {
  if (!isset($_COOKIE['session'])) {
    return json_encode(array('meta'=>array('code'=>401)));
  }
  $json = curlHelper(BACKEND_BASE_URL . $endpoint, '',
    array('sid' => $_COOKIE['session']));
  return $json;
}

function checkSession() {
  $json = backendAuthedGet('opt/session');
  $ses = json_decode($json, true);
  return $ses;
}

function backendLogin($user, $pass) {
  // login, password, email
  $data = curlHelper(BACKEND_BASE_URL . 'lynx/login', array(
    'login'    => $user,
    'password' => $pass,
  ), array('HTTP_X_FORWARDED_FOR' => getip()));
  echo "data[$data]<br>\n";
  $res = json_decode($data, true);
  if (!empty($res['data']['session'])) {
    setcookie('session', $res['data']['session'], $res['data']['ttl'], '/');
    //redirectTo('control_panel.php');
    return true;
  }
  return $res['meta'];
}

function backendCreateBoard() {
  $data = curlHelper(BACKEND_BASE_URL . 'lynx/createBoard', array(
    'boardUri'         => $_POST['uri'],
    'boardName'        => $_POST['title'],
    'boardDescription' => $_POST['description'],
    // captcha?
  ), array('sid' => $_COOKIE['session']));
  return $data;
}

function backendLynxAccount() {
  $json = backendAuthedGet('lynx/account');
  //echo "json[$json]<br>\n";
  $account = json_decode($json, true);
  //print_r($account);
  return $account;
}


?>
